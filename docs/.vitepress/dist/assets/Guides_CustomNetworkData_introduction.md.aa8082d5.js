import{_ as t,o as e,c as o,a}from"./chunks/framework.b8a39646.js";const g=JSON.parse('{"title":"Introduction to Custom Network Data","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"Guides/CustomNetworkData/introduction.md","filePath":"Guides/CustomNetworkData/introduction.md"}'),n={name:"Guides/CustomNetworkData/introduction.md"},r=a('<h1 id="introduction-to-custom-network-data" tabindex="-1">Introduction to Custom Network Data <a class="header-anchor" href="#introduction-to-custom-network-data" aria-label="Permalink to &quot;Introduction to Custom Network Data&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>This document will cover how to use and send <strong>custom network data</strong> between the <strong>server</strong> and <strong>client</strong> through the <a href="https://docs.unrealengine.com/5.2/en-US/API/Runtime/Engine/GameFramework/UCharacterMovementComponent" target="_blank" rel="noreferrer"><strong>CharacterMovementComponent</strong></a>. This could include sending additional compressed flags, additional input vectors, and more custom data.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You must be using Packed Movement RPCs for this to work! (This is determined by console variable NetUsePackedMovementRPCs)</p></div><h2 id="terminology" tabindex="-1">Terminology <a class="header-anchor" href="#terminology" aria-label="Permalink to &quot;Terminology&quot;">​</a></h2><p>During this guide, you will see the terms <strong>Input State</strong>, <strong>Intermediate State</strong> and <strong>Output State</strong> a lot. Lets begin by explaining these terms.</p><h3 id="input-state" tabindex="-1">Input State <a class="header-anchor" href="#input-state" aria-label="Permalink to &quot;Input State&quot;">​</a></h3><p>The input state refers to any value that is used to calculate moves, and these values are purely Client Authoritative.</p><p>There are current only three default input states: <strong>Acceleration</strong>, <strong>Control Rotation</strong>, and <strong>CompressedFlags</strong>. These values are driven directly by player inputs, such as key presses or mouse movements. Because these values are Client Authoritative, the server has no ability to change them.</p><h3 id="intermediate-state" tabindex="-1">Intermediate State <a class="header-anchor" href="#intermediate-state" aria-label="Permalink to &quot;Intermediate State&quot;">​</a></h3><p>The intermediate state refers to any values that are in between input and output, as these values are modified by inputs, but also modify the output state.</p><p>A good example of this is <strong>velocity</strong>. Velocity is affected by <strong>acceleration</strong>, but it also modifies <strong>location</strong>.</p><h3 id="output-state" tabindex="-1">Output State <a class="header-anchor" href="#output-state" aria-label="Permalink to &quot;Output State&quot;">​</a></h3><p>The output state refers to any values that are the end result of performing a move.</p><p>For most projects, this will consist mainly of the <strong>capsule location</strong>, and the <strong>movement mode</strong>. These are the &quot;end values&quot; that affect what the player sees in the world.</p><div class="info custom-block"><p class="custom-block-title">NOTE</p><p>All types of state values are stored in the SavedMove, but only the input state should be replayed in the PrepMoveFor function.</p></div><h3 id="other-terminology" tabindex="-1">Other Terminology <a class="header-anchor" href="#other-terminology" aria-label="Permalink to &quot;Other Terminology&quot;">​</a></h3><p>You will see the terms <strong>client</strong> and <strong>server</strong> a lot. In this case, client refers specifically to the owning client.</p><p><strong>Net Correction</strong> and <strong>ClientAdjustment</strong> are synonymous (they mean the same thing).</p><p>Unreal Engine internally refers to the <strong>network data</strong> as <strong>PacketMovementRPCs</strong>. This may be because the system was originally intended to just use more compressed flags as triggers, instead of RPCs (which is a very good use, but not the only use).</p>',20),s=[r];function i(l,u,d,h,c,m){return e(),o("div",null,s)}const v=t(n,[["render",i]]);export{g as __pageData,v as default};
